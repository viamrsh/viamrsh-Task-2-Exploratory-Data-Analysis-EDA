

from google.colab import drive
drive.mount('/content/drive')


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

#  Load the dataset
df = pd.read_csv('/content/drive/MyDrive/Titanic-Dataset.csv')


# Basic information
print("First 5 rows of the dataset:")
print(df.head())
print("\nDataset Info:")
print(df.info())
print("\nSummary Statistics:")
print(df.describe(include='all'))

# Check for missing values
print("\nMissing Values:")
print(df.isnull().sum())

# Histograms for numerical features
numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns
df[numerical_cols].hist(figsize=(12, 10), bins=20, edgecolor='black')
plt.suptitle("Histograms of Numerical Features")
plt.tight_layout()
plt.show()

# Boxplots to detect outliers (Fixed)
import math

num_plots = len(numerical_cols)
cols = 3 
rows = math.ceil(num_plots / cols)

plt.figure(figsize=(5 * cols, 4 * rows))

for i, col in enumerate(numerical_cols):
    plt.subplot(rows, cols, i + 1)
    sns.boxplot(data=df, y=col)
    plt.title(f"Boxplot of {col}")

plt.tight_layout()
plt.show()

# Correlation Matrix Heatmap
corr_matrix = df[numerical_cols].corr()
plt.figure(figsize=(10, 7))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

# Pairplot (optional: only if dataset is not too big)
sns.pairplot(df[numerical_cols])
plt.suptitle("Pairplot of Numerical Features", y=1.02)
plt.show()

# Interactive visualizations using Plotly
#  Age distribution by survival
if 'Survived' in df.columns and 'Age' in df.columns:
    fig = px.histogram(df, x='Age', color='Survived', barmode='overlay',
                       title='Age Distribution by Survival Status')
    fig.show()

#  Gender vs Survival
if 'Sex' in df.columns and 'Survived' in df.columns:
    fig = px.histogram(df, x='Sex', color='Survived', barmode='group',
                       title='Survival Count by Gender')
    fig.show()

#  Basic inferences
print("\nBasic Inferences:")
if 'Survived' in df.columns:
    print(df['Survived'].value_counts(normalize=True) * 100)
    print("More passengers did not survive than those who did.")

if 'Sex' in df.columns and 'Survived' in df.columns:
    print("\nSurvival by Gender:")
    print(pd.crosstab(df['Sex'], df['Survived'], normalize='index') * 100)

if 'Pclass' in df.columns:
    print("\nPassenger Class Distribution:")
    print(df['Pclass'].value_counts(normalize=True) * 100)
